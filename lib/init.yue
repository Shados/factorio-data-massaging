import "inspect"
import "unix"

local *


array_join = (delimiter, array) ->
  collected = ""
  for i, v in ipairs array
    collected ..= delimiter if i != 1
    collected ..= v
  return collected


lsdir = (path) ->
  dir, err, errno = unix.opendir path
  assert dir != nil, "Failed to open #{path}, errno #{errno}, error: #{err}"
  children = {}
  for {:name} in dir\files!
    continue if name == "." or name == ".."
    children[]= name
  dir\close!
  return children


run_cmd = (cmd) ->
  ok, status, num = os.execute cmd
  assert ok, "Failed to run `#{cmd}`, #{status}, #{num}"


string_split = (str, delimiter) ->
  -- Yes, we really do start the indexes at 0; this is because we're working
  -- with #str and str\sub, *not* indexing a table
  collected = {}
  previous_index = 0

  for current_index = 0, #str
    current_char = str\sub current_index, current_index
    is_delimiter = current_char == delimiter

    -- If we're at a delimiter, we need to append to the list of collected
    -- substrings
    if is_delimiter
      table.insert collected, str\sub previous_index, current_index - 1

      -- Update the previous_index value to point to just after this delimiter
      previous_index = current_index + 1

    -- We're done with the loop and need to return an actual value
    if current_index == #str
      if is_delimiter
        -- In the case of ending on a delimiter, we need a trailing empty
        -- string in order to be able to re-create the original str via a
        -- theoretical join(collected, ".") function - in order to be
        -- reversible, that is
        table.insert collected, ""
      else
        -- Otherwise, just add the current substring
        table.insert collected, str\sub previous_index, current_index
      return collected


table_bare_pairs = (t) ->
  return next, t, nil


table_deep_copy = (t, copymeta=false, _seen={}) ->
  res = {}
  _seen[t] = res
  for k, v in next, t
    if (type v) == "table"
      res[k] = _seen[v] or table_deep_copy(v, copymeta, _seen)
    else
      res[k] = v
  setmetatable res, (getmetatable t) if copymeta
  return res


table_get_path = (tbl, path) ->
  cur = tbl
  -- Walk (and create, if needed) path down to the end
  for segment in *path
    next_ = cur[segment]
    unless next_
      next_ = {}
      cur[segment] = next_
    cur = next_
  return cur


table_insert_path = (tbl, path, item) ->
  cur = tbl
  -- Walk (and create, if needed) path down to last segment
  for i=1, #path-1
    segment = path[i]
    next_ = cur[segment]
    unless next_
      next_ = {}
      cur[segment] = next_
    cur = next_
  cur[path[#path]] = item
  return tbl


-- NOTE: Assumes there's never a situation in which a[key] is a table and
-- b[key] is not a table, or vice-versa.
-- NOTE: Assumes no circular references.
-- NOTE: Assumes no metatables.
table_intersection = (a, b) ->
  intersection = {}
  for k, v in pairs a
    continue unless b[k] != nil
    if (type v) == "table"
      intersection[k] = table_intersection v, b[k]
    else
      intersection[k] = v
  return intersection


table_remove_path = (tbl, path) ->
  cur = tbl
  -- Walk path down to last segment
  for i=1, #path-1
    segment = path[i]
    next_ = cur[segment]
    assert next_, "table_remove_path(): path #{inspect path} not valid for table"
    cur = next_
  cur[path[#path]] = nil
  return tbl


table_shallow_copy = (t, copymeta=false) ->
  res = {k, v for k, v in table_bare_pairs t}
  setmetatable res, (getmetatable t) if copymeta
  return res


-- NOTE: Assumes there's never a situation in which a[key] is a table and
-- b[key] is not a table, or vice-versa.
-- NOTE: Assumes no circular references.
-- NOTE: Assumes no metatables.
table_union = (...) ->
  argn = select '#', ...
  assert argn >= 2, "Didn't provide at least 2 tables to table_union"
  a = select 1, ...
  union = table_deep_copy a
  for i = 2, argn
    other = select i, ...
    for k, v in pairs other
      if (type v) == "table" and (type union[k]) == "table"
        union[k] = table_union union[k], v
      else
        union[k] = v
  return union


xdg_home_default = (dir_type) ->
  var = "XDG_#{dir_type\upper!}_HOME"
  suffix = switch dir_type
    when "data"
      ".local/share"
    when "config"
      ".config"
    when "state"
      ".local/state"
    when "cache"
      ".cache"
    else
      error "Unknown XDG home directory #{var}"

  if env := os.getenv var
    return env

  if home_env := os.getenv "HOME"
    return "#{home_env}/#{suffix}"

  uid = unix.getuid!
  if home := unix.getpwuid uid, "dir"
    return "#{home}/#{suffix}"

  error "Couldn't determine appropriate path for #{var} directory, try setting the environment variable"

{
  :array_join
  :lsdir
  :run_cmd
  :string_split
  :table_deep_copy
  :table_get_path
  :table_insert_path
  :table_intersection
  :table_remove_path
  :table_shallow_copy
  :table_union
  :xdg_home_default
}
