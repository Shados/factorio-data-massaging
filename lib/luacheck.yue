-- Functionally, a dump of luacheck's lua52c standard -- see note at point of usage
STD_LUACHECK_LUA52C = {
  read_globals: {
    _ENV: {
      other_fields: true,
      read_only: false
    },
    _G: {
      other_fields: true,
      read_only: false
    },
    _VERSION: {
    },
    arg: {
      other_fields: true
    },
    assert: {},
    bit32: {
      fields: {
        arshift: {},
        band: {},
        bnot: {},
        bor: {},
        btest: {},
        bxor: {},
        extract: {},
        lrotate: {},
        lshift: {},
        replace: {},
        rrotate: {},
        rshift: {}
      }
    },
    collectgarbage: {},
    coroutine: {
      fields: {
        create: {},
        resume: {},
        running: {},
        status: {},
        wrap: {},
        yield: {}
      }
    },
    debug: {
      fields: {
        debug: {},
        gethook: {},
        getinfo: {},
        getlocal: {},
        getmetatable: {},
        getregistry: {},
        getupvalue: {},
        getuservalue: {},
        sethook: {},
        setlocal: {},
        setmetatable: {},
        setupvalue: {},
        setuservalue: {},
        traceback: {},
        upvalueid: {},
        upvaluejoin: {}
      }
    },
    dofile: {},
    error: {},
    getmetatable: {},
    io: {
      fields: {
        close: {},
        flush: {},
        input: {},
        lines: {},
        open: {},
        output: {},
        popen: {},
        read: {},
        stderr: {
          fields: {
            __gc: {},
            __index: {
              other_fields: true
            },
            __tostring: {},
            close: {},
            flush: {},
            lines: {},
            read: {},
            seek: {},
            setvbuf: {},
            write: {}
          }
        },
        stdin: {
          fields: {
            __gc: {},
            __index: {
              other_fields: true
            },
            __tostring: {},
            close: {},
            flush: {},
            lines: {},
            read: {},
            seek: {},
            setvbuf: {},
            write: {}
          }
        },
        stdout: {
          fields: {
            __gc: {},
            __index: {
              other_fields: true
            },
            __tostring: {},
            close: {},
            flush: {},
            lines: {},
            read: {},
            seek: {},
            setvbuf: {},
            write: {}
          }
        },
        tmpfile: {},
        type: {},
        write: {}
      }
    },
    ipairs: {},
    load: {},
    loadfile: {},
    loadstring: {},
    math: {
      fields: {
        abs: {},
        acos: {},
        asin: {},
        atan: {},
        atan2: {},
        ceil: {},
        cos: {},
        cosh: {},
        deg: {},
        exp: {},
        floor: {},
        fmod: {},
        frexp: {},
        huge: {},
        ldexp: {},
        log: {},
        log10: {},
        max: {},
        min: {},
        modf: {},
        pi: {},
        pow: {},
        rad: {},
        random: {},
        randomseed: {},
        sin: {},
        sinh: {},
        sqrt: {},
        tan: {},
        tanh: {}
      }
    },
    module: {},
    next: {},
    os: {
      fields: {
        clock: {},
        date: {},
        difftime: {},
        execute: {},
        exit: {},
        getenv: {},
        remove: {},
        rename: {},
        setlocale: {},
        time: {},
        tmpname: {}
      }
    },
    package: {
      fields: {
        config: {
          fields: {
            byte: {},
            char: {},
            dump: {},
            find: {},
            format: {},
            gmatch: {},
            gsub: {},
            len: {},
            lower: {},
            match: {},
            rep: {},
            reverse: {},
            sub: {},
            upper: {}
          }
        },
        cpath: {
          fields: {
            byte: {},
            char: {},
            dump: {},
            find: {},
            format: {},
            gmatch: {},
            gsub: {},
            len: {},
            lower: {},
            match: {},
            rep: {},
            reverse: {},
            sub: {},
            upper: {}
          },
          read_only: false
        },
        loaded: {
          other_fields: true,
          read_only: false
        },
        loaders: {
          other_fields: true,
          read_only: false
        },
        loadlib: {},
        path: {
          fields: {
            byte: {},
            char: {},
            dump: {},
            find: {},
            format: {},
            gmatch: {},
            gsub: {},
            len: {},
            lower: {},
            match: {},
            rep: {},
            reverse: {},
            sub: {},
            upper: {}
          },
          read_only: false
        },
        preload: {
          other_fields: true,
          read_only: false
        },
        seeall: {},
        searchers: {
          other_fields: true,
          read_only: false
        },
        searchpath: {}
      }
    },
    pairs: {},
    pcall: {},
    print: {},
    rawequal: {},
    rawget: {},
    rawlen: {},
    rawset: {},
    require: {},
    select: {},
    setmetatable: {},
    string: {
      fields: {
        byte: {},
        char: {},
        dump: {},
        find: {},
        format: {},
        gmatch: {},
        gsub: {},
        len: {},
        lower: {},
        match: {},
        rep: {},
        reverse: {},
        sub: {},
        upper: {}
      }
    },
    table: {
      fields: {
        concat: {},
        insert: {},
        maxn: {},
        pack: {},
        remove: {},
        sort: {},
        unpack: {}
      }
    },
    tonumber: {},
    tostring: {},
    type: {},
    unpack: {},
    xpcall: {}
  }
}

INSTRUMENT_MODE_REMOVED_LUA_GLOBALS = {
  "coroutine"
  "dofile"
  "io"
  "loadfile"
  "os"
  -- Everything but package.loaded
  "package.config"
  "package.cpath"
  "package.loadlib"
  "package.loaders"
  "package.path"
  "package.preload"
  "package.searchers"
  "package.searchpath"
  -- From Lua 5.2's LUA_COMPAT_ALL, which Factorio appears to be using, and is the base luacheck standard we build from
  "package.seeall"
}
REMOVED_LUA_GLOBALS = {
  ...INSTRUMENT_MODE_REMOVED_LUA_GLOBALS
  -- Only getinfo() and traceback() left in debug by default
  "debug.debug"
  "debug.gethook"
  "debug.getlocal"
  "debug.getmetatable"
  "debug.getregistry"
  "debug.getupvalue"
  "debug.getuservalue"
  "debug.sethook"
  "debug.setlocal"
  "debug.setmetatable"
  "debug.setupvalue"
  "debug.setuservalue"
  "debug.upvalueid"
  "debug.upvaluejoin"
}
-- Don't know why these aren't mentioned in the API doc JSON files; they *could* be
ADDED_LUA_GLOBALS = {
  "serpent._COPYRIGHT"
  "serpent._DESCRIPTION"
  "serpent._NAME"
  "serpent._VERSION"
  "serpent.block"
  "serpent.dump"
  "serpent.line"
  "serpent.load"
  "serpent.serialize"
  "string.pack"
  "string.packsize"
  "string.unpack"
  -- Undocumented, appears to be a `pairs`-iterating version of `table.concat`,
  -- but implemented on the C/++ side?
  "table.pairs_concat"
}
INSTRUMENT_MODE_LUA_GLOBALS = {
  "on_error"
}
PROTOTYPE_LUA_GLOBALS = {
  "data.raw"
  "data.extend"
  "data.is_demo"
  "mods"
  "settings.startup"
}
-- Overrides for luacheckrc that cannot be (correctly) determined from the API
-- JSON docs
PROTOTYPE_LUA_READ_ONLY_INDEXABLE_GLOBALS = {
  "settings.startup"
  "mods"
}
PROTOTYPE_LUA_WRITE_INDEXABLE_GLOBALS = {
  "data.raw"
}
RUNTIME_LUA_READ_ONLY_INDEXABLE_GLOBALS = {
  "settings.startup"
}
RUNTIME_LUA_WRITE_INDEXABLE_GLOBALS = {
  "settings.global"
  "settings.player_default"
}

return {
  :ADDED_LUA_GLOBALS
  :INSTRUMENT_MODE_LUA_GLOBALS
  :PROTOTYPE_LUA_GLOBALS
  :PROTOTYPE_LUA_READ_ONLY_INDEXABLE_GLOBALS
  :PROTOTYPE_LUA_WRITE_INDEXABLE_GLOBALS
  :REMOVED_LUA_GLOBALS
  :RUNTIME_LUA_READ_ONLY_INDEXABLE_GLOBALS
  :RUNTIME_LUA_WRITE_INDEXABLE_GLOBALS
  :STD_LUACHECK_LUA52C
}
