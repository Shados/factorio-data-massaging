#!/usr/bin/env -S yue -e

import "argparse"
import "inspect"
import "jsonschema"
import "unix"
import "rapidjson"
import "ssl.https"

-- "https://lua-api.factorio.com/next/runtime-api.json"
local *

API_BASE = "https://lua-api.factorio.com/"
SCRIPT_DIR = do
  str = debug.getinfo(1, "S").source
  str\match "(.*)/"
CACHE_DIR = "#{SCRIPT_DIR}/cache"
JSON_DOCS_DIR = "#{SCRIPT_DIR}/json-docs"
RUNTIME_DOCS_DIR = "#{SCRIPT_DIR}/json-docs/runtime-api"
RUNTIME_DOCS_EARLIEST_VERSION = {1, 1, 35}
SCHEMA_DIR = "#{SCRIPT_DIR}/schemas"

main = ->
  runtime_doc_version_list = get_doc_versions!
  ensure_runtime_docs runtime_doc_version_list
  parser = argparse!
  with parser
    \name "factorio-data-generation"
    \description "A tool for generating useful data and configuration from Factorio (meta)data files"
    \command "validate"
    \command_target "command"
    \require_command false

  args = parser\parse arg
  print inspect args

  switch args.command
    when nil
      print "no command"
    when "validate"
      validate_json_docs runtime_doc_version_list

  return

debug_print = (...) ->
  (os.getenv "DEBUG") and print(...)

get_doc_versions = ->
  unix.mkpath CACHE_DIR
  cached_file = "#{CACHE_DIR}/api-docs-version-list.html"
  if unix.stat cached_file
    print "Using cached API docs version list"
    with io.open cached_file, "r"
      html_str = \read "*a"
      \close!
      return parse_versions_html html_str
  else
    res, code, _, status = https.request API_BASE
    assert res, "Failed to get documentation version list page (#{API_BASE}), code: #{code}, status: #{status}"
    with io.open cached_file, "w"
      \write res
      \close!
    return parse_versions_html res

parse_versions_html = (html_str) ->
  versions = [{(tonumber major), (tonumber minor), (tonumber sub)} for major, minor, sub in html_str\gmatch ">%s-(%d+)%.(%d+)%.(%d+)%s-<"]
  versions = [version for version in *versions when version_at_least RUNTIME_DOCS_EARLIEST_VERSION, version]
  return ["#{v[1]}.#{v[2]}.#{v[3]}" for v in *versions]

version_at_least = (compare_to, version) ->
  if compare_to[1] != version[1]
    return compare_to[1] <= version[1]
  if compare_to[2] != version[2]
    return compare_to[2] <= version[2]
  if compare_to[3] != version[3]
    return compare_to[3] <= version[3]
  return true

ensure_runtime_docs = (runtime_doc_version_list) ->
  unix.mkpath RUNTIME_DOCS_DIR
  for version in *runtime_doc_version_list
    cached_file = "#{RUNTIME_DOCS_DIR}/#{version}.json"
    if unix.stat cached_file
      debug_print "Already have cached file #{cached_file}"
    else
      url = "#{API_BASE}/#{version}/runtime-api.json"
      res, code, _, status = https.request url
      assert res, "Failed to get machine-readable runtime API doc page (#{url}), code: #{code}, status: #{status}"
      with io.open cached_file, "w"
        \write res
        \close!

  return

validate_json_docs = (versions) ->
  validators = initialise_json_schema_validators!
  print "Validating machine-readable runtime API docs against JSON Schemas"
  for version in *versions
    runtime_api_json = rapidjson.load "#{RUNTIME_DOCS_DIR}/#{version}.json"
    validator = validators[runtime_api_json.api_version]
    if validator
      valid, err = validator runtime_api_json
      if valid
        print "#{version}: valid"
      else
        print "#{version}: invalid\n#{err}"

initialise_json_schema_validators = ->
  print "Parsing JSON Schemas"
  schema_dir, err, errno = unix.opendir SCHEMA_DIR
  assert schema_dir != nil, "Failed to open #{SCHEMA_DIR}, errno #{errno}, error: #{err}"
  validators = {}
  for {:name} in schema_dir\files!
    --                   " runtime-api-docs-v1.json"
    version = name\match "^runtime%-api%-docs%-v(%d+)%.json$"
    continue unless version
    schema_json = rapidjson.load "#{SCHEMA_DIR}/#{name}"
    validators[tonumber version] = jsonschema.generate_validator schema_json, { null: rapidjson.null }

  return validators

main!
return
